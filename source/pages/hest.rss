<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
  <channel>
    <title>Hest</title>
    <link>https://ivanish.ca/hest-podcast</link>
    <itunes:author>Ivan Reese</itunes:author>
    <description>Ivan Reese thinks out loud about the design of his esoteric graphical programming system.</description>
    <itunes:subtitle>Ivan Reese thinks out loud about the design of his esoteric graphical programming system.</itunes:subtitle>
    <language>en</language>
    <itunes:category text="Technology"/>
    <itunes:explicit>yes</itunes:explicit>
    <itunes:image href="https://ivanish.s3.amazonaws.com/hest/podcast.png"/>
    <itunes:owner><itunes:name>Ivan Reese</itunes:name><itunes:email>ivanreese@gmail.com</itunes:email></itunes:owner>
    <copyright>Copyright should be abolished.</copyright>

    <lastBuildDate>22 May 2021 21:50:00 MST</lastBuildDate>

    <item>
      <guid isPermaLink="false">hest-episode-1</guid>
      <pubDate>22 Mar 2021 00:00:00 MST</pubDate>
      <title>1 • Graphical Programming</title>
      <itunes:title>Graphical Programming</itunes:title>
      <itunes:episode>1</itunes:episode>
      <itunes:duration>00:13:26</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/1.mp3"
        length="6448321"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        The term Visual Programming is a bit of a misnomer. My preference is Graphical Programming, though it is hard to overcome cultural inertia. Oh, also, welcome to the show.
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-2</guid>
      <pubDate>29 Mar 2021 00:00:00 MST</pubDate>
      <title>2 • Why?</title>
      <itunes:title>Why?</itunes:title>
      <itunes:episode>2</itunes:episode>
      <itunes:duration>00:13:03</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/2.mp3"
        length="6269044"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Why am I making Hest? Who is it for? When did I start? When will it end? What is it now? Where is it going? And what of this podcast?
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-3</guid>
      <pubDate>5 Apr 2021 00:00:00 MST</pubDate>
      <title>3 • Waterslide Kid</title>
      <itunes:title>Waterslide Kid</itunes:title>
      <itunes:episode>3</itunes:episode>
      <itunes:duration>00:13:36</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/3.mp3"
        length="6535234"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Functions and data, conveyance, points and edges, and execution with a mandatory, explicit notion of time and space.
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-4</guid>
      <pubDate>12 Apr 2021 00:00:00 MST</pubDate>
      <title>4 • Giant Thumb</title>
      <itunes:title>Giant Thumb</itunes:title>
      <itunes:episode>4</itunes:episode>
      <itunes:duration>00:15:03</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/4.mp3"
        length="7232325"
        type="audio/mpeg"
      />
      <itunes:explicit>yes</itunes:explicit>
      <itunes:subtitle>
        Grab the giant thumb, push it all the way to infinity at the top, or negative infinity at the bottom.
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-5</guid>
      <pubDate>19 Apr 2021 00:00:00 MST</pubDate>
      <title>5 • The Space</title>
      <itunes:title>The Space</itunes:title>
      <itunes:episode>5</itunes:episode>
      <itunes:duration>00:19:37</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/5.mp3"
        length="9424137"
        type="audio/mpeg"
      />
      <itunes:explicit>yes</itunes:explicit>
      <itunes:subtitle>
        Fully explore the space of your designs, even if it makes you into an infamous grump. Also, I sometimes make up jargon like Graphical Programming, and today we have another: Participatory Execution. Finally, Wallace &amp; Gromit have their long-awaited debut on the show.
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-6</guid>
      <pubDate>26 Apr 2021 00:00:00 MST</pubDate>
      <title>6 • No Moon</title>
      <itunes:title>No Moon</itunes:title>
      <itunes:episode>6</itunes:episode>
      <itunes:duration>00:26:54</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/6.mp3"
        length="12915283"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Virtual edges and pocket dimensions might be key pieces of a workable approach to abstraction, something that Hest sorely lacks.
      </itunes:subtitle>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-7</guid>
      <pubDate>3 May 2021 00:00:00 MST</pubDate>
      <title>7 • Focus Mode</title>
      <itunes:title>Focus Mode</itunes:title>
      <itunes:episode>7</itunes:episode>
      <itunes:duration>00:18:44</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/7.mp3"
        length="8992810"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Data as player character. Continuity and intimacy. The well of video games. Putting your finger on the data and following it from birth to death. A patchwork quilt of understanding, versus a single continuous thread.
      </itunes:subtitle>
      <description>
        Data as player character. Continuity and intimacy. The well of video games. Putting your finger on the data and following it from birth to death. A patchwork quilt of understanding, versus a single continuous thread.
      </description>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-8</guid>
      <pubDate>8 May 2021 00:00:00 MST</pubDate>
      <title>8 • SpaceChem</title>
      <itunes:title>Focus Mode</itunes:title>
      <itunes:episode>8</itunes:episode>
      <itunes:duration>00:09:53</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/8.mp3"
        length="4747609"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Hest owes more to SpaceChem than any other inspiration. It's a beautiful little gem of a game, released by Zachtronics back in 2011. SpaceChem challenges you to design, develop, and debug complex systems, with an interface that looks a bit like a node-and-wire visual programming language. But the feel of playing it is wholly unique, and worth reflecting on and drawing from.
      </itunes:subtitle>
      <description>
        Hest owes more to SpaceChem than any other inspiration. It's a beautiful little gem of a game, released by Zachtronics back in 2011. SpaceChem challenges you to design, develop, and debug complex systems, with an interface that looks a bit like a node-and-wire visual programming language. But the feel of playing it is wholly unique, and worth reflecting on and drawing from.
      </description>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-9</guid>
      <pubDate>15 May 2021 00:00:00 MST</pubDate>
      <title>9 • Uncoordinated Anthill</title>
      <itunes:title>Uncoordinated Anthill</itunes:title>
      <itunes:episode>9</itunes:episode>
      <itunes:duration>00:16:10</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/9.mp3"
        length="7768337"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Hest is a long way from finished — a long way from viable, even. It's still riddled with design issues. Let's take a look at one of the big ones: with the current design, there are no mechanisms for coordination. Introducing some of the most obvious coordination mechanisms would violate the spirit of Hest. How should that be fixed? Tune in next week!
      </itunes:subtitle>
      <description>
        Hest is a long way from finished — a long way from viable, even. It's still riddled with design issues. Let's take a look at one of the big ones: with the current design, there are no mechanisms for coordination. Introducing some of the most obvious coordination mechanisms would violate the spirit of Hest. How should that be fixed? Tune in next week!
      </description>
    </item>

    <item>
      <guid isPermaLink="false">hest-episode-10a</guid>
      <pubDate>22 May 2021 21:50:00 MST</pubDate>
      <title>10 • Fibers</title>
      <itunes:title>Fibers</itunes:title>
      <itunes:episode>10</itunes:episode>
      <itunes:duration>00:14:07</itunes:duration>
      <enclosure
        url="https://ivanish.s3.amazonaws.com/hest/10.mp3"
        length="6776715"
        type="audio/mpeg"
      />
      <itunes:explicit>no</itunes:explicit>
      <itunes:subtitle>
        Lots of anthills, and a handful of cake too.
      </itunes:subtitle>
      <description>
        <![CDATA[Last episode, we looked at how the edges-conveying-points execution model leads to problems of synchronization. If you change some small part of your program so that it takes a little longer for data to traverse than it did before, then data leaving that small part will be behind schedule (so to speak) for wherever it needs to go next. Local changes cause non-local effects.

This problems exists because, at the moment, a function (node / point) will execute the moment data arrives at it — so for a function to take two arguments, there needs to be two data points that arrive at that function simultaneously.

Another issue comes when an in-development Hest program, which might be running at some much-slowed down speed, needs to pull in data from the outside world. Data from the outside world arrives at whatever speed it arrives at, slow-mo be damned.

For both issues, I'm feeling the need to add sync primitives, queuing/buffering, and other mechanisms for temporal coordination. But I don't like the way these solutions feel, so I'm trying to find other things that feel different.

This episode looks at one such different-feeling approach: get away from the idea of points travelling along edges! Instead, treat the edges like "fibers" (a la fiber optics), which assume the value of data conveyed to them and instantly convey that data onward. The data, no longer chopped into discrete points, no longer needs to be coordinated so strictly. Functions that are fed solely by these "fiber"-like edges will always have the most recent value available to them on every inbound edge, so they can produce a new output value the instant any single inbound value changes. No need to coordinate multiple pieces of data to arrive at a function simultaneously.

Also — hi! I'm writing a much longer description than normal because my explanations within the episode are a little… weak. That's the deal. This podcast is just me thinking out loud, no plan, no script. It's doodles in the notebook. In the moment that I record, I am just talking extemporaneously, which is surprisingly hard. I have very little grasp on how much context I've already shared on previous episodes, or even how well I'm outlining the body of each new idea. I expect this disorganization is only going to get more pronounced as I get away from super high-level, welcome-to-Hest basics and dive more into the ideas I'm still unsure about and problems I don't really comprehend. We'll have to see! So in the future, if I feel I've done a mediocre job in the show, be sure to check the show notes for another crack.]]>
      </description>
    </item>

  </channel>
</rss>
