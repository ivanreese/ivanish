<!-- @import ../header.kit -->

<!-- TODO: Shouldn't these be inside <main>? -->
<script defer src="/assets/codemirror.js"></script>
<link rel="stylesheet" href="/assets/codemirror.css">
<script defer src="/assets/codemirror-coffeescript.js"></script>
<script defer src="/assets/coffeescript.js"></script>
<link rel="stylesheet" href="noise.css">
<script defer src="noise.js"></script>

<main>

  <title>Make Some Noise</title>

  <p>Random noise is super cool. Once you have noise, you can make all sorts of awesome stuff out of it. It's a powerful tool for computer-generated art and music, simulations and video games, cryptography, and more.</p>
  <p>This is a tutorial. We'll start <i>very</i> simple, and build up to some fucking sweet particle swirls.</p>
  <p>We'll be using <a rel="nofollow" href="http://coffeescript.org">CoffeeScript</a> and the HTML &lt;canvas&gt;, but you can use anything that lets you draw with code.</p>


  Note to Ivan: This is a super cool paper that helps understand the theory behind this noise algo: http://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
  It might be good to reference it on this page.


  <section>
    <a id="1">Meet The Editor</a>

    <p>The <b>log</b> function prints out text. You can edit the text in the white box.</p>
    <textarea js-repl>
      log "Zzzzzzzzz"
    </textarea>

    <p>If you make a mistake, you'll see a message that (hopefully) explains what went wrong. Don't write an infinite loop — I'm not guarding against those.</p>
    <textarea js-repl>
      log "Quoth the raven...
    </textarea>

    <p>We're also set up for easy drawing, and you can edit all this code. Boom!</p>
    <textarea js-repl js-canvas>
      # 0 is black, 127 is medium grey, and 255 is white.
      lightness = 255

      # w and h are automatically set to the width and height of the canvas
      x = w/2
      y = h/2

      # We're gonna draw something 100 pixels wide, and 50 pixels tall
      xSize = 100
      ySize = 50

      # drawRect will let us draw rectangles. We're gonna draw a lot of rectangles.
      drawRect lightness, x, y, xSize, ySize

      # Delete the # in front of this line:
      #drawRect 127, x - xSize, y - ySize, xSize, ySize
    </textarea>
  </section>

  <section>
    <a id="2">Let's Draw Stripes</a>

    <p>Why stripes? Because we have to start somewhere.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32 # Why 32? No reason. Try changing this!

      # Move from the left edge (0) to the right edge (w)
      x = 0
      while x &lt; w

        # Draw a white rectangle that is stripeSize wide, and as tall as the canvas
        drawRect 255, x, 0, stripeSize, h

        # Move 2 stripe-widths to the right for the next stripe,
        # leaving a black space in between
        x += stripeSize * 2
    </textarea>

    <p>We can color the stripes based on their position. Let's make a repeating gradient that is 256 pixels wide.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      x = 0
      while x &lt; w
        # The % (called "modulo") wraps x into the range 0-255.
        lightness = x % 256
        # If x is 255, lightness will be 255.
        # If x is 256, lightness will be 0.
        # If x is 257, lightness will be 1.

        drawRect lightness, x, 0, stripeSize, h

        # Move 1 stripe-width to the right.
        x += stripeSize
    </textarea>

    <p class="after">Did you try changing the 256? Did you set it to a big number, like 500? Notice how the gradient looks about the same, but then it turns solid white for a while. That's because you're trying to draw colors brighter than 255, but 255 is the brightest color we can draw. So.. that's why, for the rest of the tutorial, we're gonna use a lot of numbers between 0 and 255 (256 numbers total) — it makes it easier to turn these numbers into useful values between black and white.</p>

    <p>We can generate a list of numbers to use as colors (and for other stuff, soon).</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      # A list of the numbers from 0 to 255 (256 numbers in total)
      # This might seem pointless, but just wait.
      values = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]

      # This is a function that uses modulo to pull a number out of our list.
      # It works exactly like the x % 256 in the previous example.
      getValue = (i)-> values[i % values.length]

      x = 0
      while x &lt; w
        lightness = getValue x
        drawRect lightness, x, 0, stripeSize, h
        x += stripeSize
    </textarea>

    <p>Time to get fucking NOISY — let's shuffle the array!</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]

      x = 0
      while x &lt; w
        lightness = getValue x
        drawRect lightness, x, 0, stripeSize, h
        x += stripeSize
    </textarea>
    <p class="after">This might not seem like much, but we've now taken the critical step. Simply by using a shuffled list of numbers, we start to imbue our code with the spark of life.</p>
  </section>

  <section>
    <a id="3">Another Dimension, New Galaxy</a>

    <p>Here's how we turn our 1D stripes into 2D squares.</p>
    <textarea js-repl js-canvas>
      squareSize = 32
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]

      # To get a random value for any square, we...
      # 1. Get a value for x, just like before.
      # 2. Merge the x value with our y position, and use THAT to get another random value.
      # There are all sorts of other ways we could have done this, but this works plenty good.
      getValue2D = (x, y)-> getValue(y + getValue(x))

      x = 0
      while x &lt; w
        y = 0
        while y &lt; h
          l = getValue2D x, y
          drawRect l, x, y, squareSize, squareSize
          y += squareSize
        x += squareSize
    </textarea>

    <p class="after">This was a very short chapter. We'll come back to 2D soon. But first...</p>
  </section>

  <section>
    <a id="3">Take Off Your Glasses</a>

    <p>We're about to take another big step. We will, basically, blur the image. More specifically, we will <i>interpolate neighbouring values</i>, which is a fancy way of saying <i>blur things together</i>.</p>
    <p>First, let's go back to our very first stripes — simple black and white.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      x = 0
      while x &lt; w
        drawRect 255, x, 0, stripeSize, h # draw a white stripe
        x += stripeSize * 2 # move 2 stripe-widths to the right
    </textarea>

    <p>Let's tweak this slightly. We'll use a "values" array, like before, but it'll only have 2 entries: black and white. Why bother with the array? When we blur, we blur between two side-by-side values. Blurring between black and white in this array is just a simpler versions of what we'll do next — blurring the randomly shuffled 256-value array.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      nStripes = Math.ceil w / stripeSize
      values = [0, 255]
      getValue = (i)-> values[i % values.length]

      i = 0 # 'i' will be the current stripe we're on
      while i &lt; nStripes
        l = getValue i # get the color of the current stripe
        x = i * stripeSize # the stripe should be positioned i stripe-lengths from the left
        drawRect l, x, 0, stripeSize, h
        i++ # now, on to the next stripe
    </textarea>

    <p>To blur these stripes together, we're going to chop them into little tiny slices, and each slice will have a slightly different color.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      sliceSize = 8
      slicesPerStripe = stripeSize / sliceSize
      nSlices = Math.ceil w / sliceSize
      values = [0, 255]
      getValue = (i)-> values[i % values.length]

      i = 0 # 'i' will be the current slice we're on
      while i &lt; nSlices
        prevStripe = Math.floor i / slicesPerStripe
        nextStripe = prevStripe + 1

        l0 = getValue prevStripe # get the color of the previous stripe
        l1 = getValue nextStripe # get the color of the next stripe

        t = (i % slicesPerStripe) / slicesPerStripe
        l = Math.round l0 * (1 - t) + l1 * t

        x = i * sliceSize # the slice should be positioned i slice-lengths from the left
        drawRect l, x, 0, sliceSize, h
        i++ # now, on to the next slice
    </textarea>

    <p>So.. what happens if we switch back to the shuffled 0-255 list?</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      sliceSize = 8
      slicesPerStripe = stripeSize / sliceSize
      nSlices = Math.ceil w / sliceSize
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]

      i = 0 # 'i' will be the current slice we're on
      while i &lt; nSlices
        stripe = Math.floor i / slicesPerStripe

        l0 = getValue stripe     # get the color of the current stripe
        l1 = getValue stripe + 1 # get the color of the next stripe

        t = (i % slicesPerStripe) / slicesPerStripe
        l = Math.round l0 * (1 - t) + l1 * t

        x = i * sliceSize # the slice should be positioned i slice-lengths from the left
        drawRect l, x, 0, sliceSize, h
        i++ # now, on to the next slice
    </textarea>
    <p class="after">You should try changing the sliceSize to 1. Smooth move.</p>

    <p>One little tweak — we can mess with the 't' value to change to change the blur. Note how the pattern in this example is exactly the same as the previous example.. it's just.. smoother.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      sliceSize = 1
      slicesPerStripe = stripeSize / sliceSize
      nSlices = Math.ceil w / sliceSize
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]

      # This smooth function takes a number that moves directly between 0 and 1, and makes it move between 0 and 1 with a bit of a curve.
      smooth = (t)-> 6 * Math.pow(t,5) - 15 * Math.pow(t,4) + 10 * Math.pow(t,3)

      # The blend function takes two values to be blended, and a third value (in the range 0 to 1).
      # At 0, we have 100% of the first value. At 0.5, 50% of each. At 1, we have 100% of the second value.
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t

      i = 0
      while i &lt; nSlices
        stripe = Math.floor i / slicesPerStripe
        l0 = getValue stripe
        l1 = getValue stripe + 1

        # Call the new smoothing function
        t = smooth (i % slicesPerStripe) / slicesPerStripe
        l = blend l0, l1, t

        x = i * sliceSize
        drawRect l, x, 0, sliceSize, h
        i++ # now, on to the next slice
    </textarea>
  </section>

  <section>
    <a id="4">Back 2D Future</a>

    <p>Instead of blurring two stripes, we need to blur four squares in a 2 by 2 grid. We'll call these squares TL,TR,BL,BR. Also, instead of little slices, let's call them "chunks". So a square will be made up of little chunks.</p>
    <textarea js-repl js-canvas>
      squareSize = 32
      chunkSize = 4
      chunksPerSide = squareSize / chunkSize
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]
      getValue2D = (x, y)-> getValue(y + getValue(x))
      smooth = (t)-> 6 * Math.pow(t,5) - 15 * Math.pow(t,4) + 10 * Math.pow(t,3)
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t

      i = 0
      while i &lt; w
        j = 0
        while j &lt; h
          iLeft = Math.floor i / chunksPerSide
          iTop = Math.floor j / chunksPerSide
          iRight = iLeft + 1
          iBottom = iTop + 1

          lTopLeft = getValue2D iLeft, iTop
          lTopRight = getValue2D iRight, iTop
          lBottomLeft = getValue2D iLeft, iBottom
          lBottomRight = getValue2D iRight, iBottom

          tx = smooth (i % chunksPerSide) / chunksPerSide
          ty = smooth (j % chunksPerSide) / chunksPerSide

          lTop = blend lTopLeft, lTopRight, tx
          lBottom = blend lBottomLeft, lBottomRight, tx
          l = blend lTop, lBottom, ty

          x = i * chunkSize
          y = j * chunkSize
          drawRect l, x, y, chunkSize, chunkSize
          j++
        i++
    </textarea>
    <p class="after">Just like before, you should change the chunkSize to 1, for optimal smoothness.</p>

    <p>Since we're now drawing squares with a chunkSize of 1, we might as well just call a spade a spade: We're drawing individual pixels. So let's revise the last example so that we're working pixel-by-pixel.</p>
    <textarea js-repl js-canvas>
      squareSize = 32
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]
      getValue2D = (x, y)-> getValue(y + getValue(x))
      smooth = (t)-> 6 * Math.pow(t,5) - 15 * Math.pow(t,4) + 10 * Math.pow(t,3)
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t

      x = 0
      while x &lt; w
        y = 0
        while y &lt; h
          iLeft = Math.floor x / squareSize
          iTop = Math.floor y / squareSize
          iRight = iLeft + 1
          iBottom = iTop + 1

          lTopLeft = getValue2D iLeft, iTop
          lTopRight = getValue2D iRight, iTop
          lBottomLeft = getValue2D iLeft, iBottom
          lBottomRight = getValue2D iRight, iBottom

          tx = smooth x/squareSize % 1
          ty = smooth y/squareSize % 1

          lTop = blend lTopLeft, lTopRight, tx
          lBottom = blend lBottomLeft, lBottomRight, tx
          l = blend lTop, lBottom, ty

          drawPixel l, x, y
          y++
        x++
    </textarea>

    <p>At this point, we have some minimally-decent 2D noise. Well, okay.. we have a blurry, dirty tile floor. Next, we'll make it a bit more.. <i>puffy</i>.</p>
  </section>

  <section>
    <a id="5">Puffiest of Puff Daddies: Perlin</a>
    <p>This next section is a fair bit harder. If you've raced through the tutorial up to now, maybe take a moment to pull up your socks, make a coffee, cancel all your appointments, delete all your emails...</p>

    <p>We've had some <a rel="nofollow" href="https://youtu.be/u4jJOk5MpFM?t=16m43s">fun fun</a> drawing gradients. We've kinda drawn gradients in two different cases so far: drawing stripes that gradually get brighter, and then drawing interpolated values.</p>
    <p>To make our 2D noise even better, we're going to use... more gradients! And to get there, we're gonna go all the way back to our black and white stripes.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      nStripes = Math.ceil w / stripeSize

      stripe = 0
      while stripe &lt; nStripes
        l = 255 * (stripe % 2) # This is yet another way to make alternating black and white — the more you know!
        x = stripe * stripeSize
        drawRect l, x, 0, stripeSize, h # Back to drawRect, for a sec
        stripe++
    </textarea>

    <p>And we'll switch from drawing stripes to drawing slices. Within each stripe, we want the slices to go from black to white.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      sliceSize = 4
      slicesPerStripe = stripeSize / sliceSize
      nSlices = Math.ceil w / sliceSize

      slice = 0
      while slice &lt; nSlices
        l = 255 * (slice/slicesPerStripe % 1) # This gives us the gradient inside each stripe
        x = slice * sliceSize
        drawRect l, x, 0, sliceSize, h
        slice++
    </textarea>
    <p class="after">And once again, you should set that sliceSize to 1, so we're doing a slice per pixel.</p>

    <p>And then we do the cleanup step, of course, where we just assume our slice size is 1.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      x = 0
      while x &lt; w
        l = 255 * (x/stripeSize % 1)
        drawRect l, x, 0, 1, h
        x++
    </textarea>

    <p>Now let's use these gradients. We're going to make a bunch of gradients just like these, but facing different directions. Eg: Let's flip these gradients so they run the other way.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      x = 0
      while x &lt; w
        # l counts from 0 to 255
        l = 255 * (x/stripeSize % 1)

        # r counts from.. 255 to 0! So the gradient will run backwards.
        r = 255 - l

        drawRect r, x, 0, 1, h
        x++
    </textarea>

    <p>Now we're gonna do something kinda silly. Rather than making the gradient run backwards, we're gonna make it run negative.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      x = 0
      while x &lt; w
        # l counts from 0 to 255
        l = 255 * (x/stripeSize % 1)

        # r counts from -255 to 0
        r = l - 255

        drawRect r, x, 0, 1, h
        x++
    </textarea>

    <p>Yeah, it looks black, but there are actually gradient values running into the negative direction. Let's adjust the brightness so we can see them.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32

      # This function takes numbers in the range -255 to 255, and scales them to fit within 0 and 255 so we can see them.
      # If you pass in 0 (half way between -255 and 255), you get out 127 (half way between 0 and 255).
      adjustBrightness = (l)-> (l + 255) / 2

      x = 0
      while x &lt; w
        l = 255 * (x/stripeSize % 1) # 0 to 255
        r = l - 255                  # -255 to 0
        a = adjustBrightness r       # 0 to 127
        drawRect a, x, 0, 1, h
        x++
    </textarea>

    <p>And just to see what happens, let's run our positive gradients through the adjustBrightness function</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      adjustBrightness = (l)-> (l + 255) / 2

      x = 0
      while x &lt; w
        l = 255 * (x/stripeSize % 1) # 0 to 255
        a = adjustBrightness l       # 127 to 255
        drawRect a, x, 0, 1, h
        x++
    </textarea>

    <p>So.. what would happen if gradually blended from positive to negative as we went across the stripe? If the positive starts at 0, and the negative ends at 0.. would the whole thing just be 0?</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      # Welcome back, blend
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t
      adjustBrightness = (l)-> (l + 255) / 2

      x = 0
      while x &lt; w
        # We want to blend from 100% positive gradient on the left, to 100% negative gradient on the right
        # So our t value will go from 0 to 1 across the stripe
        t = x / stripeSize % 1

        l = 255 * (x/stripeSize % 1) # positive: 0 to 255
        r = l - 255                  # negative: -255 to 0
        b = blend l, r, t            # blended:  0 to 0?
        a = adjustBrightness b
        drawRect a, x, 0, 1, h
        x++
    </textarea>

    <p>Okay.. not too interesting.. BUT, what would happen if smoothed our transition value, like we did to make the blur smoother?</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      # Welcome back, smooth!
      smooth = (t)-> 6 * Math.pow(t,5) - 15 * Math.pow(t,4) + 10 * Math.pow(t,3)
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t
      adjustBrightness = (l)-> (l + 255) / 2

      x = 0
      while x &lt; w
        # We want to transition from the positive gradient on the left, to the negative gradient on the right
        t = smooth x/stripeSize % 1

        l = 255 * (x/stripeSize % 1) # positive: 0 to 255
        r = l - 255                  # negative: 0 to -255
        b = blend l, r, t            # blended:  0 to... 0?
        a = adjustBrightness b
        drawRect a, x, 0, 1, h
        x++
    </textarea>

    <p>Now this is going somewhere. We've got two gradients — positive and negative. We can blend between them, which somewhat cancels them out (save for a bit of a ripple from the smoothing). Next, we're going to make a list of these gradients, just like we did with the color values before. And just like before, we'll start with a list of just the two gradients we have so far: positive and negative. And we'll use this list along with our random list of color values from before.</p>
    <textarea js-repl js-canvas>
      stripeSize = 32
      values = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]
      getValue = (i)-> values[i % values.length]
      gradients = [1, -1] # Yep, that's a pretty simple way of saying "positive" and "negative"
      getGradient = (i)-> gradients[i % gradients.length] # Should look familiar
      smooth = (t)-> 6 * Math.pow(t,5) - 15 * Math.pow(t,4) + 10 * Math.pow(t,3)
      blend = (a, b, t)-> Math.round a * (1 - t) + b * t
      adjustBrightness = (l)-> (l + 255) / 2

      x = 0
      while x &lt; w
        t = smooth x/stripeSize % 1

        p = 255 * (x/stripeSize % 1) # positive: 0 to 255
        n = p - 255                  # negative: 0 to -255

        stripe = Math.floor x / stripeSize
        l0 = getValue stripe         # random between 0 and 255
        l1 = getValue stripe + 1     # random between 0 and 255

        g0 = getGradient l0
        g1 = getGradient l1

        v0 = g0 * p
        v1 = g1 * n

        b = blend v0, v1, t
        a = adjustBrightness b

        drawRect a, x, 0, 1, h
        x++
    </textarea>

  </section>

</main>
