{"version":3,"sources":["script/app.coffee","script/bio.coffee","script/fade-header.coffee","script/stars.coffee"],"names":[],"mappings":"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","file":"scripts.js","sourceRoot":"/source/","sourcesContent":["measurePerf = false\n\nif measurePerf\n  console.log \"Performance --------------------\"\n\nTAU = Math.PI * 2\n\ndo ()->\n\n  ## RAND TABLE\n  # We use a rand table, rather than Math.random(), so that we can have determinstic randomness.\n  # This is not a performance optimization — Math.random() is already VERY fast. It just gives us repeatability.\n  \n  # Set determinstic to true for debugging, false for deployment\n  determinstic = false\n  seed = if determinstic then 2147483647 else Math.random() * 2147483647 |0\n  \n  # Needs to be larger than the number of times we use it in one place, or else we'll get duplication.\n  # At this size, it takes about ~2ms to populate the table on my machine\n  window.randTableSize = 4096\n  \n  # This is just a generic swap function. It seems faster to let the browser JIT this than to inline it ourselves.\n  swap = (i, j, p)->\n    tmp = p[i]\n    p[i] = p[j]\n    p[j] = tmp\n  \n  if measurePerf\n    perfStart = performance.now()\n  \n  window.randTable = [0...randTableSize]\n  j = 0\n  for i in [0...randTableSize]\n    j = (j + seed + randTable[i]) % randTableSize\n    swap(i, j, randTable)\n  \n  if measurePerf\n    console.log((performance.now() - perfStart).toPrecision(4) + \"  Table\")\n","bioShift = Math.random()\n\nrenderBio = (canvases)->\n  time = Date.now()/1000\n  t = Math.sin(time/7)/2 + 0.5\n  \n  for canvas in canvases\n    # Setup & Locals\n    context = canvas.getContext \"2d\"\n    width = canvas.width = parseInt(canvas.parentNode.offsetWidth) * 2\n    height = canvas.height = parseInt(canvas.parentNode.offsetHeight) * 2\n    \n    # DRAW BACKGROUND\n    context.fillStyle = \"transparent\"\n    context.fillRect(0, 0, width, height)\n    \n    if measurePerf\n      perfStart = performance.now()\n    \n    nBlobs = width/6\n    for i in [0..nBlobs]\n      increase = i/nBlobs # get bigger as i increases\n      decrease = (1 - increase) # get smaller as i increases\n      a = randTable[i % randTableSize]\n      d = randTable[a]\n      r = randTable[d]\n      c = randTable[r]\n      l = randTable[c]\n      r = r / randTableSize * width / 5\n      # start from 200 (blue), shift up to 170 degrees right (orange), + 40 degrees of jitter. Thus, no green.\n      c = (c / randTableSize * 50 + (170 * t) + 200) % 360 |0\n      l = l / randTableSize * 10 + 70\n      x =          Math.cos((a/randTableSize) * TAU)  * Math.pow(d/randTableSize, 1/10) * (r/2 + width/2)  + width/2|0\n      y = Math.abs(Math.sin((a/randTableSize) * TAU)) * Math.pow(d/randTableSize, 1/3)  * (r/2 + height/2) + height/2|0\n      context.beginPath()\n      context.fillStyle = \"hsla(#{c}, 30%, #{l}%, .03)\"\n      context.arc(x, y, r, 0, TAU)\n      context.fill()\n\n  if measurePerf\n    console.log((performance.now() - perfStart).toPrecision(4) + \"  Bio\")\n\n\nready ()->\n  canvases = document.querySelectorAll \"canvas.js-bio\"\n  \n  doRender = ()-> renderBio(canvases)\n  requestRender = ()-> requestAnimationFrame doRender\n  \n  requestRender()\n  setInterval requestRender, 500\n  # window.addEventListener \"resize\", requestRender\n","do ()->\n  header = document.querySelector(\"header\")\n  return unless header?\n  header.style.opacity = headerTarget = headerCurrent = 1\n  headerDelta = 0\n  dirty = false\n  epsilon = 0.0001\n\n  fadeHeader = ()->\n    opacity = 1 - (document.body.scrollTop + document.body.parentNode.scrollTop) / header.offsetHeight * 1.2\n    opacity = opacity * opacity * opacity\n    opacity = Math.min(1, Math.max(0, opacity))\n    headerTarget = opacity\n\n  update = ()->\n    dirty = false\n    \n    headerDelta = (headerTarget - headerCurrent)/5\n    if Math.abs(headerDelta) > epsilon\n      header.style.opacity = headerCurrent = headerCurrent + headerDelta\n      requestUpdate()\n  \n  requestUpdate = ()->\n    if not dirty\n      dirty = true\n      window.requestAnimationFrame(update)\n  \n  window.addEventListener \"scroll\", ()->\n    fadeHeader()\n    requestUpdate()\n","ready ()->\n  canvases = document.querySelectorAll \"canvas.js-stars\"\n  \n  doRender = ()-> renderStars(canvases)\n  requestRender = ()-> requestAnimationFrame doRender\n  \n  requestRender()\n  window.addEventListener \"resize\", requestRender\n\nrenderStars = (canvases)->\n  \n  # measurePerf, ready, randTable, randTableSize, and a few other things\n  # are defined in app.coffee and are used as read-only globals.\n  \n  for canvas in canvases\n    context = canvas.getContext \"2d\"\n    \n    # Just do everything at 2x so that we're good for most retina displays (hard to detect)\n    width = canvas.width = parseInt(canvas.parentNode.offsetWidth) * 2\n    height = canvas.height = parseInt(canvas.parentNode.offsetHeight) * 2\n    \n    # How many stellar objects do we need?\n    density = Math.sqrt width * height\n    \n    # This lets us define things in terms of a \"natural\" display size\n    dscale = density/3000\n    \n    # DRAW BACKGROUND\n    context.fillStyle = \"transparent\"\n    context.fillRect(0, 0, width, height)\n    \n    if measurePerf\n      console.log \"\"\n      starsPerfStart = performance.now()\n    \n    \n    pixelStars        = true\n    stars             = true\n    redBlobs          = true\n    purpleBlobs       = true\n    blueBlobs      = true\n    smallGlowingStars = true\n    \n    nPixelStars        = density/5  |0\n    nStars             = density/50 |0\n    nRedBlobs          = density/25 |0\n    nPurpBlobs         = density/20 |0\n    nBlueBlobs      = density/25 |0\n    nSmallGlowingStars = density/30 |0\n    \n    \n    # Pixel Stars\n    if pixelStars\n      start = performance.now() if measurePerf\n      for i in [0..nPixelStars]\n        x = randTable[(i + 5432) % randTableSize]\n        y = randTable[x]\n        o = randTable[y]\n        r = randTable[o]\n        x = x * width / randTableSize |0\n        y = y * height / randTableSize |0\n        o = o / randTableSize * 0.5 + 0.5\n        r = r / randTableSize * 1.5 + .5\n        context.beginPath()\n        context.fillStyle = \"hsla(300, 25%, 50%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(300, 0%, 50%, 0.01)\"\n        context.arc(x, y, r*20, 0, TAU)\n        context.fill()\n      console.log((performance.now() - start).toPrecision(4) + \"  pixelStars\") if measurePerf\n      \n    \n    # Stars\n    if stars\n      start = performance.now() if measurePerf\n      for i in [0..nStars]\n        increase = i/nStars # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[i % randTableSize]\n        y = randTable[x]\n        r1 = randTable[y]\n        r2 = randTable[r1]\n        sx = randTable[r2]\n        sy = randTable[sx]\n        l = randTable[sy]\n        c = randTable[l]\n        o = randTable[c]\n        x = x * width / randTableSize  |0\n        y = y * height / randTableSize |0\n        r1 = r1 / randTableSize * 4 + .5\n        r2 = r2 / randTableSize * 3 + .5\n        l = l / randTableSize * 20 + 20\n        o = o / randTableSize * 10 * decrease + 0.3\n        c = c / randTableSize * 120 + 200\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 30%, #{l}%, #{o})\"\n        context.arc(x, y, r1, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(0, 0%, 100%, 1)\"\n        context.arc(x, y, r2, 0, TAU)\n        context.fill()\n      console.log((performance.now() - start).toPrecision(4) + \"  stars\") if measurePerf\n    \n    \n    # Red Blobs\n    if redBlobs\n      start = performance.now() if measurePerf\n      for i in [0..nRedBlobs]\n        increase = i/nRedBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        o = randTable[(12345 + i) % randTableSize]\n        x = randTable[o]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        h = randTable[l]\n        x = x / randTableSize * width  |0\n        y = y / randTableSize * height |0\n        r = r / randTableSize * 120 * decrease * dscale + 20\n        l = l / randTableSize * 30 * decrease + 30\n        o = o / randTableSize * 0.015 + 0.008\n        h = h / randTableSize * 30 + 350\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o*3/4})\"\n        context.arc(x, y, r * 2, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o/2})\"\n        context.arc(x, y, r * 3, 0, TAU)\n        context.fill()\n      console.log((performance.now() - start).toPrecision(4) + \"  redBlobs\") if measurePerf\n\n\n    # Purple Blobs\n    if purpleBlobs\n      start = performance.now() if measurePerf\n      for i in [0..nPurpBlobs]\n        increase = i/nPurpBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 1234) % randTableSize]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        o = randTable[l]\n        x = (x / randTableSize * width*2/3 + width*1/6)|0\n        y = (y / randTableSize * height*2/3 + height*1/6)|0\n        r = r / randTableSize * 200 * dscale * decrease + 30\n        l = l / randTableSize * 10 * increase + 9\n        o = o / randTableSize * 0.07 * decrease + 0.05\n        context.beginPath()\n        context.fillStyle = \"hsla(290, 100%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n      console.log((performance.now() - start).toPrecision(4) + \"  purpleBlobs\") if measurePerf\n\n    \n    # Blue Blobs\n    if blueBlobs\n      start = performance.now() if measurePerf\n      for i in [0..nBlueBlobs]\n        increase = i/nBlueBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 123) % randTableSize]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        h = randTable[l]\n        x = (x / randTableSize * width)|0\n        y = (y / randTableSize * height)|0\n        r = r / randTableSize * 120 * dscale * decrease + 20\n        s = l / randTableSize * 40 + 30\n        l = l / randTableSize * 40 * decrease + 10\n        h = h / randTableSize * 30 + 200\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.017)\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.015)\"\n        context.arc(x, y, r * 2, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.013)\"\n        context.arc(x, y, r * 3, 0, TAU)\n        context.fill()\n      console.log((performance.now() - start).toPrecision(4) + \"  blueBlobs\") if measurePerf\n    \n    \n    # Small Round Stars with circular glow rings\n    if smallGlowingStars\n      start = performance.now() if measurePerf\n      for i in [0..nSmallGlowingStars]\n        increase = i/nSmallGlowingStars # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        r = randTable[(i + 345) % randTableSize]\n        l = randTable[r]\n        o = randTable[l]\n        c = randTable[o]\n        x = randTable[c]\n        y = randTable[x]\n        x = (x * width / randTableSize)|0\n        y = (y * height / randTableSize)|0\n        r = r / randTableSize * 2 + 1\n        l = l / randTableSize * 20 + 40\n        o = o / randTableSize * 1 * decrease + 0.25\n        c = c / randTableSize * 180 + 200\n\n        # far ring\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 70%, #{l}%, #{o/25})\"\n        context.arc(x, y, r * r * r, 0, TAU)\n        context.fill()\n        \n        # close ring\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 50%, #{l}%, #{o/6})\"\n        context.arc(x, y, r * r, 0, TAU)\n        context.fill()\n        \n        # round star body\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 20%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n\n        # point of light\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 100%, 90%, #{o * 1.5})\"\n        context.arc(x, y, 1, 0, TAU)\n        context.fill()\n        \n      console.log((performance.now() - start).toPrecision(4) + \"  smallGlowingStars\") if measurePerf\n\n      \n    if measurePerf\n      console.log \"\"\n      console.log (performance.now() - starsPerfStart).toPrecision(4) + \"  Stars\"\n"]}