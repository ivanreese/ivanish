{"version":3,"sources":["script/app.coffee","script/bio.coffee","script/fade-header.coffee","script/stars.coffee"],"names":[],"mappings":"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","file":"scripts.js","sourceRoot":"/source/","sourcesContent":["TAU = Math.PI * 2\nsize = 4096 # Needs to be larger than any pixel width we want to draw, I think\nseed = Math.random() * 999999 |0\ntime = Date.now()/1000\nrandTable = [0...size]\n\nswap = (i, j, p)->\n  tmp = p[i]\n  p[i] = p[j]\n  p[j] = tmp\n\n# Initialize the randomness table\ndo ()->\n  j = 0\n  for i in [0...size]\n    j = (j + seed + randTable[i]) % size\n    swap(i, j, randTable)\n","do ()->\n  debug = false\n\n  shift = Math.random()\n  \n  window.addEventListener \"resize\", ready ()->\n    canvases = document.querySelectorAll \"canvas.js-bio\"\n    for canvas in canvases\n      # Setup & Locals\n      context = canvas.getContext \"2d\"\n      width = canvas.width = parseInt(canvas.parentNode.offsetWidth) * 2\n      height = canvas.height = parseInt(canvas.parentNode.offsetHeight) * 2\n      \n      # DRAW BACKGROUND\n      context.fillStyle = \"transparent\"\n      context.fillRect(0, 0, width, height)\n      \n      INNER = performance.now() if debug\n      \n      nBlobs = width/3\n      for i in [0..nBlobs]\n        increase = i/nBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        a = randTable[i % size]\n        d = randTable[a]\n        r = randTable[d]\n        c = randTable[r]\n        l = randTable[c]\n        r = r / size * width/5\n        # start from 200 (blue), shift up to 170 degrees right (orange), + 40 degrees of jitter. Thus, no green.\n        c = ((c / size * 50 + (170 * shift) + 200) % 360)|0\n        l = l / size * 10 + 65\n        x =          Math.cos((a/size) * TAU)  * Math.pow(d/size, 1/10) * (r/2 + width/2)  + width/2|0\n        y = Math.abs(Math.sin((a/size) * TAU)) * Math.pow(d/size, 1/3)  * (r/2 + height/2) + height/2|0\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 23%, #{l}%, .03)\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n    \n    if debug\n      console.log Math.ceil(performance.now() - INNER)\n","do ()->\n  header = document.querySelector(\"header\")\n  return unless header?\n  header.style.opacity = headerTarget = headerCurrent = 1\n  headerDelta = 0\n  dirty = false\n  epsilon = 0.0001\n\n  fadeHeader = ()->\n    opacity = 1 - document.body.scrollTop / header.offsetHeight * 1.2\n    opacity = opacity * opacity * opacity\n    opacity = Math.min(1, Math.max(0, opacity))\n    headerTarget = opacity\n\n  update = ()->\n    dirty = false\n    \n    headerDelta = (headerTarget - headerCurrent)/5\n    if Math.abs(headerDelta) > epsilon\n      header.style.opacity = headerCurrent = headerCurrent + headerDelta\n      requestUpdate()\n  \n  requestUpdate = ()->\n    unless dirty\n      dirty = true\n      window.requestAnimationFrame(update)\n  \n  window.addEventListener \"scroll\", ()->\n    fadeHeader()\n    requestUpdate()\n","do ()->\n  debug = false\n  \n  window.addEventListener \"resize\", ready ()->\n    canvases = document.querySelectorAll \"canvas.js-stars\"\n    for canvas in canvases\n      # Setup & Locals\n      context = canvas.getContext \"2d\"\n      width = canvas.width = parseInt(canvas.parentNode.offsetWidth) * 2\n      height = canvas.height = parseInt(canvas.parentNode.offsetHeight) * 2\n      \n      # This lets us define things in terms of a \"natural\" display size — aka a biased vw\n      wscale = width/3000\n      \n      # DRAW BACKGROUND\n      # context.fillStyle = \"white\"\n      context.fillStyle = \"transparent\"\n      context.fillRect(0, 0, width, height)\n      \n      # DISTRIBUTION CHECK\n      # context.fillStyle = \"black\"\n      # for n, i in randTable\n      #   context.fillRect(i/size * width, height - n/size * height, 2, 2)\n      \n      INNER = performance.now() if debug\n      \n      # Background Smudges\n      # nBackgroundSmudges = width/20\n      # for i in [0..nBackgroundSmudges]\n      #   increase = i/nBackgroundSmudges # get bigger as i increases\n      #   decrease = (1 - increase) # get smaller as i increases\n      #   w = randTable[i % size]\n      #   h = randTable[w]\n      #   y = randTable[h]\n      #   l = randTable[y]\n      #   o = randTable[l]\n      #   c = randTable[o]\n      #   x = randTable[c]\n      #   x = (x * width  / size - 20)|0\n      #   y = (y * height / size - 20)|0\n      #   w = w / size * 100 + 20\n      #   h = h / size * 100 + 20\n      #   l = l / size * 8 + 10\n      #   o = o / size * Math.min(5 * decrease, 0.5)\n      #   c = c / size * 40 + 280\n      #   context.fillStyle = \"hsla(#{c}, 30%, #{l}%, #{o})\"\n      #   context.fillRect(x, y, w, h)\n      \n      # Star Color\n      nBigStars = width/100\n      for i in [0..nBigStars]\n        increase = i/nBigStars # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[i % size]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        c = randTable[l]\n        o = randTable[c]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        r = r / size * 3 + 1.5\n        l = l / size * 20 + 20\n        o = o / size * 10 * decrease + 0.3\n        c = c / size * 120 + 200\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 40%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n      \n      \n      # Star Glow\n      nBigStars = width/100\n      for i in [0..nBigStars]\n        x = randTable[i % size]\n        y = randTable[x]\n        r = randTable[y]\n        sx = randTable[r]\n        sy = randTable[sx]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        r = r / size * 2 + 0.5\n        sx = (sx / size * 2 - 0.5)\n        sy = (sy / size * 2 - 0.5)\n        context.beginPath()\n        context.fillStyle = \"hsla(0, 0%, 100%, 1)\"\n        context.arc(x + sx, y + sy, r, 0, TAU)\n        context.fill()\n\n      # Planets\n      nBigStars = width/100\n      for i in [0..nBigStars]\n        increase = i/nBigStars # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 239) % size]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        c = randTable[l]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        r = r / size * wscale * 5 * decrease + 2\n        l = l / size * 20 + 10\n        c = (c / size * 180 + 200) % 360\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 50%, #{l}%, 0.5)\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n      \n      \n      # Big Blue Blobs\n      nBlueBlobs = width/20\n      for i in [0..nBlueBlobs]\n        increase = i/nBlueBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 123) % size]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        h = randTable[l]\n        x = (x / size * width)|0\n        y = (y / size * height)|0\n        r = r / size * 100 * wscale * decrease + 20\n        s = l / size * 40 + 30\n        l = l / size * 40 * decrease + 5\n        h = h / size * 30 + 200\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.01)\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.009)\"\n        context.arc(x, y, r * 2, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.008)\"\n        context.arc(x, y, r * 3, 0, TAU)\n        context.fill()\n      \n      # Small Blue Blobs\n      nSmallBlueBlobs = width/30\n      for i in [0..nSmallBlueBlobs]\n        increase = i/nSmallBlueBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 473) % size]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        h = randTable[l]\n        x = (x / size * width*2/3 + width/3)|0\n        y = (y / size * height)|0\n        r = r / size * 20 * wscale * decrease + 5\n        s = l / size * 30 + 40\n        l = l / size * 40 * decrease + 20\n        h = h / size * 50 + 200\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.03)\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.02)\"\n        context.arc(x, y, r * 2, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, #{s}%, #{l}%, 0.01)\"\n        context.arc(x, y, r * 3, 0, TAU)\n        context.fill()\n      \n      # Purple Blobs\n      nPurpBlobs = width/20\n      for i in [0..nPurpBlobs]\n        increase = i/nPurpBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        x = randTable[(i + 1234) % size]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        o = randTable[l]\n        x = (x / size * width*2/3 + width*1/6)|0\n        y = (y / size * height*2/3 + height*1/6)|0\n        r = r / size * 300 * wscale * decrease + 30\n        l = l / size * 10 * increase + 9\n        o = o / size * 0.03 * decrease + 0.03\n        context.beginPath()\n        context.fillStyle = \"hsla(290, 100%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n      \n      # Red Blobs\n      nRedBlobs = width/20\n      for i in [0..nRedBlobs]\n        increase = i/nRedBlobs # get bigger as i increases\n        decrease = (1 - increase) # get smaller as i increases\n        o = randTable[(12345 + i) % size]\n        x = randTable[o]\n        y = randTable[x]\n        r = randTable[y]\n        l = randTable[r]\n        h = randTable[l]\n        x = (x / size * width)|0\n        y = (y / size * height)|0\n        r = r / size * 100 * wscale * decrease + 20\n        l = l / size * 30 * decrease + 30\n        o = o / size * 0.01 + 0.002\n        h = h / size * 30 + 350\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o*3/4})\"\n        context.arc(x, y, r * 2, 0, TAU)\n        context.fill()\n        context.beginPath()\n        context.fillStyle = \"hsla(#{h}, 100%, #{l}%, #{o/2})\"\n        context.arc(x, y, r * 3, 0, TAU)\n        context.fill()\n      \n      \n      # Small Square Stars\n      nBSmallSquareStars = width/10\n      for i in [0..nBSmallSquareStars]\n        y = randTable[(i + 234) % size]\n        w = randTable[y]\n        h = randTable[w]\n        l = randTable[h]\n        o = randTable[l]\n        c = randTable[o]\n        x = randTable[c]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        w = w / size * 2 + 1\n        h = h / size * 2 + 1\n        l = l / size * 30 + 10\n        o = o / size * 0.5 + 0.2\n        c = c / size * 40 + 240\n        context.fillStyle = \"hsla(#{c}, 30%, #{l}%, #{o})\"\n        context.fillRect(x, y, w, h)\n      \n      \n      # Small Round Stars\n      nSmallRoundStars = width/20\n      for i in [0..nSmallRoundStars]\n        r = randTable[(i + 345) % size]\n        l = randTable[r]\n        o = randTable[l]\n        c = randTable[o]\n        x = randTable[c]\n        y = randTable[x]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        r = r / size * 2 + 1\n        l = l / size * 40 + 10\n        o = o / size * 0.4 + 0.2\n        c = c / size * 100 + 220\n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 30%, #{l}%, #{o})\"\n        context.arc(x, y, r, 0, TAU)\n        context.fill()\n      \n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 30%, #{l + 40}%, #{o * 2})\"\n        context.arc(x, y, 1, 0, TAU)\n        context.fill()\n      \n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 70%, #{l*2/3}%, 0.1)\"\n        context.arc(x, y, r * r, 0, TAU)\n        context.fill()\n      \n        context.beginPath()\n        context.fillStyle = \"hsla(#{c}, 70%, #{l/2}%, 0.05)\"\n        context.arc(x, y, r * r * r, 0, TAU)\n        context.fill()\n      \n      \n      # Pixel Stars\n      pixelStars = width/5\n      for i in [0..pixelStars]\n        x = randTable[(i + 5432) % size]\n        y = randTable[x]\n        o = randTable[y]\n        x = (x * width / size)|0\n        y = (y * height / size)|0\n        o = o / size * 0.3 + 0.7\n        context.beginPath()\n        context.fillStyle = \"hsla(300, 30%, 50%, #{o})\"\n        context.arc(x, y, 1, 0, TAU)\n        context.fill()\n      \n    \n    if debug\n      console.log \"STARS\"\n      console.log Math.ceil(performance.now() - INNER)\n"]}